# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined who the Top 10 artists are by popularity.
SELECT artist_name
,track_name
,popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

#Then I determined the average popularity, danceability and energy by artist and track.
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Then I determined which artists have the most popular songs by finding out the total popularity across all songs.
SELECT
artist_name,
SUM(popularity) AS total_popularity
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY total_popularity DESC;

#Finally, I analyzed the relationship between popularity and tempo, valance and then liveness.
SELECT 
CASE 
WHEN tempo < 60 THEN 'Very Slow'
WHEN tempo BETWEEN 60 AND 90 THEN 'Slow'
WHEN tempo BETWEEN 90 AND 120 THEN 'Moderate'
WHEN tempo BETWEEN 120 AND 150 THEN 'Fast'
ELSE 'Very Fast'
END AS tempo_range,
AVG(popularity) AS avg_popularity
FROM BIT_DB.spotifydata
GROUP BY tempo_range
ORDER BY avg_popularity DESC;

SELECT 
CASE 
WHEN valence < 0.2 THEN 'Very Low'
WHEN valence BETWEEN 0.2 AND 0.4 THEN 'Low'
WHEN valence BETWEEN 0.4 AND 0.6 THEN 'Moderate'
WHEN valence BETWEEN 0.6 AND 0.8 THEN 'High'
ELSE 'Very High'
END AS valence_category,
AVG(popularity) AS avg_popularity
FROM BIT_DB.spotifydata
GROUP BY valence_category
ORDER BY avg_popularity DESC;

SELECT 
CASE 
WHEN liveness < 0.2 THEN 'Very Low'
WHEN liveness BETWEEN 0.2 AND 0.4 THEN 'Low'
WHEN liveness BETWEEN 0.4 AND 0.6 THEN 'Moderate'
WHEN liveness BETWEEN 0.6 AND 0.8 THEN 'High'
ELSE 'Very High'
END AS liveness_category,
AVG(popularity) AS avg_popularity
FROM BIT_DB.spotifydata
GROUP BY liveness_category
ORDER BY avg_popularity DESC;
